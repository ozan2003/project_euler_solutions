use bit_vec::BitVec;
use rand::Rng;
use std::iter::Iterator;

/// Modular exponentiation: (`base`^`exp`) % `mod_val`
fn mod_exp(mut base: u64, mut exp: u64, mod_val: u64) -> u64
{
    // I was getting overflow errors so I used u128.
    let mut result: u64 = 1;
    base %= mod_val;

    while exp > 0
    {
        if exp % 2 == 1
        {
            result = u64::try_from(u128::from(result) * u128::from(base) % u128::from(mod_val))
                .expect("Couldn't convert u128 to u64");
        }

        base = u64::try_from(u128::from(base) * u128::from(base) % u128::from(mod_val))
            .expect("Couldn't convert u128 to u64");
        exp /= 2;
    }

    result
}

/// Determine the number of iterations `k` based on the magnitude of `num`.
const fn determine_k(num: u64) -> u32
{
    if num < 10_u64.pow(3)
    {
        5
    }
    else if num < 10_u64.pow(6)
    {
        10
    }
    else if num < 10_u64.pow(12)
    {
        20
    }
    else
    {
        50
    }
}

/// Check if a number is prime using the Miller-Rabin primality test.
/// Iteration number is determined heuristically based on the magnitude of
/// `num`.
#[allow(clippy::many_single_char_names)]
#[must_use]
pub fn is_prime(num: u64) -> bool
{
    /*
     * Fermat's Little Theorem:
     *  Let `p` a prime number and `a` is any integer that's not divisible by
     * `p`,  then:
     *
     *  a^(p-1) === 1 (mod p)
     *
     *
     * To test a number `n` for primality, we can pick a random number `a`
     * (called "witness") and check if the following holds:
     *
     * a^(n-1) === 1 (mod n)
     *
     * If the above doesn't hold, then `n` is composite since Fermat's Little
     * Theorem tells us this equation must hold for prime numbers.
     *
     * But, some composite numbers also satisfy the above equation. These are
     * called "Carmichael numbers" e.g 561.
     *
     * This is where the Miller-Rabin primality test comes in. Instead of just
     * checking if a^(n-1) === 1 (mod n), it delves deeper.
     *
     * When n is prime and n-1 = 2^s * d (d is odd), we can write:
     *
     * a^(n-1) = a^(2^s * d) = (a^d)^(2^s)
     *
     * If n is prime, this sequence:
     *
     * a^d, a^(2d), a^(4d), a^(8d), ... a^(2^s * d)
     *
     * must either:
     * - Start with 1
     * - Start with something else but contain -1 (or n-1) somewhere.
     *
     * If n is composite, at least 75% of bases a will reveal n is composite.
     * Thus, after k iterations, the probability of `n` being prime is 1/4^k.
     */
    if num < 2
    {
        return false;
    }
    else if num == 2 || num == 3
    {
        return true;
    }

    if num % 2 == 0
    {
        return false;
    }

    // Determine k based on magnitude of n.
    let k = self::determine_k(num);

    // Step 1: Decompose n-1 into d * 2^s.
    let (s, d) = {
        let mut s = 0;
        let mut d = num - 1;

        while d % 2 == 0
        {
            d /= 2;
            s += 1;
        }
        (s, d)
    };

    // Step 2: Search for a witness.
    let mut rng = rand::rng();
    // Step 3: Repeat k times.
    for _ in 0..k
    {
        let a = rng.random_range(2..num - 1); // Randomly chosen base a, 2 <= a <= n-2.

        let mut x = self::mod_exp(a, d, num); // Compute x = a^d % n.
        if x == 1 || x == num - 1
        {
            // `num` passes the test for this `a`.
            continue;
        }

        // Otherwise, square `x` repeatedly up to `s-1` times.
        for _ in 0..s - 1
        {
            x = mod_exp(x, 2, num);

            // Check is x === -1 (mod n).
            // x == num - 1 is equivalent to x == -1 (mod n).
            if x == num - 1
            {
                // If found, `num` passes the test for this `a`.
                break;
            }
        }

        // If never found, `num` is composite.
        if x != num - 1
        {
            return false;
        }
    }

    true // `num` is probably prime.
}

/// A prime sieve.
pub struct Primes
{
    primes: BitVec,
}

/// An iterator over prime numbers in a Primes sieve
///
/// # Examples
///
/// ```
/// use crate::utils::sieve::Primes;
///
/// let primes = Primes::new(100);
///
/// // Iterate through all primes up to 100
/// for prime in primes.iter() {
///     println!("{}", prime);
/// }
///
/// // Use iterator combinators
/// let first_five_primes: Vec<_> = primes.iter().take(5).collect();
/// assert_eq!(first_five_primes, vec![2, 3, 5, 7, 11]);
/// ```
pub struct PrimesIterator<'a>
{
    primes: &'a BitVec,
    current_index: usize,
}

impl Primes
{
    /// Return all primes <= n using the sieve of Atkin.
    ///
    /// # Arguments
    ///
    /// * `n` - The upper bound up to which to find all primes
    ///
    /// # Returns
    ///
    /// A `Primes` struct containing a sieve with all primes up to `n`
    ///
    /// # Examples
    ///
    /// ```
    /// use number_stuff::utils::sieve::Primes;
    ///
    /// let primes = Primes::new(100);
    /// assert!(primes.is_prime(2));
    /// assert!(primes.is_prime(3));
    /// assert!(primes.is_prime(5));
    /// assert!(primes.is_prime(97));
    /// assert!(!primes.is_prime(4));
    /// assert!(!primes.is_prime(100));
    /// ```
    #[must_use]
    pub fn new(n: usize) -> Self
    {
        /*
         * The Sieve of Atkin works by identifying prime numbers based on
         * quadratic forms and their remainders when divided by 60.
         *
         * Primes greater than 3 can be expressed as 6k +/- 1.
         * This means primes are congruent to:
         *
         * 1, 5, 7, 11, 13, 17, 19, 23, 29, 31, ... (mod 60)
         *
         * Three quadratic forms are used to generate prime candidates:
         *
         * 1) 4x^2 + y^2: Produces candidates with remainders 1, 13, 17, 29, 37, 41,
         *    49, 53 (mod 60)
         * 2) 3x^2 + y^2: Produces candidates with remainders 7, 19, 31, 43 (mod 60)
         * 3) 3x^2 - y^2: Produces candidates with remainders 11, 23, 47, 59 (mod 60)
         *
         * By working modulo 60, we can efficiently identify which numbers are prime
         * candidates.
         */
        let mut primes = BitVec::from_elem(n + 1, false);

        if n < 2
        {
            return Primes { primes };
        }

        // Set 2, 3, and 5 as prime manually.
        if n >= 2
        {
            primes.set(2, true);
        }
        if n >= 3
        {
            primes.set(3, true);
        }

        if n < 5
        {
            return Primes { primes };
        }
        primes.set(5, true);

        let sqrt_n = n.isqrt() + 1;

        // Step 1: Mark potential primes based on the quadratic forms
        for x in 1..sqrt_n
        {
            for y in 1..sqrt_n
            {
                // First quadratic form: 4x^2 + y^2
                let n1 = 4 * x * x + y * y;
                if n1 <= n
                {
                    let r = n1 % 60;
                    if r == 1 ||
                        r == 13 ||
                        r == 17 ||
                        r == 29 ||
                        r == 37 ||
                        r == 41 ||
                        r == 49 ||
                        r == 53
                    {
                        primes.set(n1, !primes[n1]);
                    }
                }

                // Second quadratic form: 3x^2 + y^2
                let n2 = 3 * x * x + y * y;
                if n2 <= n
                {
                    let r = n2 % 60;
                    if r == 7 || r == 19 || r == 31 || r == 43
                    {
                        primes.set(n2, !primes[n2]);
                    }
                }

                // Third quadratic form: 3x^2 - y^2 (x > y)
                if x > y
                {
                    let n3 = 3 * x * x - y * y;
                    if n3 <= n
                    {
                        let r = n3 % 60;
                        if r == 11 || r == 23 || r == 47 || r == 59
                        {
                            primes.set(n3, !primes[n3]);
                        }
                    }
                }
            }
        }

        // Step 2: Remove composite numbers by sieving
        for i in 5..=sqrt_n
        {
            // If i is marked as a prime candidate
            if primes[i]
            {
                // Mark all multiples of i as composite
                // Start from i*i since smaller multiples would have been marked already
                let mut multiple = i * i;
                while multiple <= n
                {
                    primes.set(multiple, false);
                    multiple += i; // Mark each multiple of i
                }
            }
        }

        Primes { primes }
    }

    /// Check if a number is prime.
    ///
    /// # Arguments
    ///
    /// * `num` - The number to check for primality
    ///
    /// # Returns
    ///
    /// Returns `true` if the number is prime, `false` otherwise.
    /// If `num` is larger than the sieve's maximum value, returns `false`.
    ///
    /// # Examples
    ///
    /// ```
    /// use number_stuff::utils::sieve::Primes;
    ///
    /// let primes = Primes::new(100);
    /// assert!(primes.is_prime(7));
    /// assert!(!primes.is_prime(6));
    /// // Larger than sieve range
    /// assert!(!primes.is_prime(101));
    /// ```
    #[must_use]
    pub fn is_prime(&self, num: usize) -> bool
    {
        self.primes.get(num).unwrap_or(false)
    }

    /// Return the nth prime number, 0-indexed.
    ///
    /// # Arguments
    ///
    /// * `n` - The index of the prime to retrieve (0-indexed)
    ///
    /// # Returns
    ///
    /// Returns the nth prime number as `Some(prime)` or `None` if the index
    /// is out of bounds for the sieve.
    ///
    /// # Examples
    ///
    /// ```
    /// use number_stuff::utils::sieve::Primes;
    ///
    /// let primes = Primes::new(100);
    /// assert_eq!(primes.nth(0), Some(2));  // 0th prime is 2
    /// assert_eq!(primes.nth(1), Some(3));  // 1st prime is 3
    /// assert_eq!(primes.nth(4), Some(11)); // 4th prime is 11
    /// // The 26th prime is 101, which is larger than the sieve's maximum
    /// assert_eq!(primes.nth(25), None);
    /// ```
    #[must_use]
    pub fn nth(&self, n: usize) -> Option<usize>
    {
        self.iter().nth(n)
    }

    /// Returns an iterator over all prime numbers in the sieve
    ///
    /// # Returns
    ///
    /// A `PrimesIterator` that yields all prime numbers from the sieve in
    /// ascending order.
    ///
    /// # Examples
    ///
    /// ```
    /// use number_stuff::utils::sieve::Primes;
    ///
    /// let primes = Primes::new(20);
    /// let primes_vec: Vec<_> = primes.iter().collect();
    /// assert_eq!(primes_vec, vec![2, 3, 5, 7, 11, 13, 17, 19]);
    /// ```
    #[must_use]
    pub const fn iter(&self) -> PrimesIterator<'_>
    {
        PrimesIterator {
            primes: &self.primes,
            current_index: 0,
        }
    }
}

impl Iterator for PrimesIterator<'_>
{
    type Item = usize;

    fn next(&mut self) -> Option<Self::Item>
    {
        while self.current_index < self.primes.len()
        {
            let index = self.current_index;
            self.current_index += 1;

            if self.primes.get(index).unwrap_or(false)
            {
                return Some(index);
            }
        }
        None
    }
}

impl<'a> IntoIterator for &'a Primes
{
    type Item = usize;
    type IntoIter = PrimesIterator<'a>;

    fn into_iter(self) -> Self::IntoIter
    {
        self.iter()
    }
}

#[cfg(test)]
mod tests
{
    use super::*;

    #[test]
    fn test_mod_exp()
    {
        assert_eq!(mod_exp(2, 3, 3), 2);
        assert_eq!(mod_exp(2, 3, 5), 3);
        assert_eq!(mod_exp(2, 3, 7), 1);
        assert_eq!(mod_exp(2, 3, 11), 8);
        assert_eq!(mod_exp(2, 3, 13), 8);
    }

    #[test]
    fn test_determine_k()
    {
        assert_eq!(determine_k(100), 5); // < 10^3
        assert_eq!(determine_k(999), 5);
        assert_eq!(determine_k(1000), 10); // < 10^6 
        assert_eq!(determine_k(999_999), 10);
        assert_eq!(determine_k(1_000_000), 20); // < 10^12
        assert_eq!(determine_k(999_999_999_999), 20);
        assert_eq!(determine_k(1_000_000_000_000), 50); // >= 10^12
        assert_eq!(determine_k(u64::MAX), 50);
    }

    #[test]
    fn test_is_prime()
    {
        // 0-100
        let primes = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
            89, 97,
        ];

        assert!(primes.into_iter().all(is_prime));

        // 1000-4500
        let primes = [
            1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091,
            1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193,
            1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291,
            1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423,
            1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493,
            1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601,
            1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699,
            1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811,
            1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,
            1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029,
            2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137,
            2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267,
            2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357,
            2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459,
            2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593,
            2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693,
            2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791,
            2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903,
            2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023,
            3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167,
            3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271,
            3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373,
            3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511,
            3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607,
            3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709,
            3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833,
            3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931,
            3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057,
            4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177,
            4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283,
            4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,
            4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493,
        ];

        assert!(primes.into_iter().all(is_prime));

        // 2^54 - 2^54 + 1000
        let primes: [u64; 269] = [
            18014398509482143,
            18014398509482147,
            18014398509482171,
            18014398509482329,
            18014398509482357,
            18014398509482387,
            18014398509482399,
            18014398509482461,
            18014398509482471,
            18014398509482483,
            18014398509482537,
            18014398509482579,
            18014398509482603,
            18014398509482677,
            18014398509482693,
            18014398509482723,
            18014398509482839,
            18014398509482863,
            18014398509482917,
            18014398509482941,
            18014398509482951,
            18014398509482989,
            18014398509483031,
            18014398509483049,
            18014398509483067,
            18014398509483119,
            18014398509483179,
            18014398509483241,
            18014398509483247,
            18014398509483367,
            18014398509483403,
            18014398509483437,
            18014398509483449,
            18014398509483461,
            18014398509483463,
            18014398509483473,
            18014398509483547,
            18014398509483601,
            18014398509483683,
            18014398509483721,
            18014398509483781,
            18014398509483787,
            18014398509483799,
            18014398509483823,
            18014398509483829,
            18014398509483863,
            18014398509483889,
            18014398509483949,
            18014398509484007,
            18014398509484063,
            18014398509484103,
            18014398509484127,
            18014398509484129,
            18014398509484217,
            18014398509484243,
            18014398509484271,
            18014398509484327,
            18014398509484357,
            18014398509484411,
            18014398509484477,
            18014398509484693,
            18014398509484697,
            18014398509484703,
            18014398509484739,
            18014398509484859,
            18014398509484921,
            18014398509484931,
            18014398509484957,
            18014398509484969,
            18014398509484987,
            18014398509485071,
            18014398509485149,
            18014398509485197,
            18014398509485219,
            18014398509485227,
            18014398509485249,
            18014398509485267,
            18014398509485351,
            18014398509485407,
            18014398509485419,
            18014398509485437,
            18014398509485447,
            18014398509485449,
            18014398509485467,
            18014398509485513,
            18014398509485561,
            18014398509485569,
            18014398509485647,
            18014398509485659,
            18014398509485681,
            18014398509485687,
            18014398509485689,
            18014398509485699,
            18014398509485701,
            18014398509485713,
            18014398509485717,
            18014398509485789,
            18014398509485797,
            18014398509485801,
            18014398509485803,
            18014398509485879,
            18014398509485887,
            18014398509485899,
            18014398509485957,
            18014398509485971,
            18014398509486047,
            18014398509486053,
            18014398509486191,
            18014398509486229,
            18014398509486233,
            18014398509486251,
            18014398509486349,
            18014398509486371,
            18014398509486403,
            18014398509486443,
            18014398509486461,
            18014398509486481,
            18014398509486497,
            18014398509486557,
            18014398509486559,
            18014398509486571,
            18014398509486637,
            18014398509486671,
            18014398509486683,
            18014398509486707,
            18014398509486713,
            18014398509486727,
            18014398509486761,
            18014398509486763,
            18014398509486767,
            18014398509486839,
            18014398509486853,
            18014398509486931,
            18014398509486971,
            18014398509486997,
            18014398509487027,
            18014398509487087,
            18014398509487141,
            18014398509487223,
            18014398509487273,
            18014398509487277,
            18014398509487291,
            18014398509487297,
            18014398509487319,
            18014398509487339,
            18014398509487399,
            18014398509487409,
            18014398509487459,
            18014398509487481,
            18014398509487537,
            18014398509487553,
            18014398509487669,
            18014398509487927,
            18014398509488039,
            18014398509488071,
            18014398509488077,
            18014398509488111,
            18014398509488149,
            18014398509488153,
            18014398509488233,
            18014398509488281,
            18014398509488327,
            18014398509488333,
            18014398509488341,
            18014398509488351,
            18014398509488369,
            18014398509488387,
            18014398509488467,
            18014398509488471,
            18014398509488483,
            18014398509488561,
            18014398509488597,
            18014398509488609,
            18014398509488677,
            18014398509488701,
            18014398509488761,
            18014398509488779,
            18014398509488783,
            18014398509488789,
            18014398509488809,
            18014398509488813,
            18014398509488827,
            18014398509488833,
            18014398509488891,
            18014398509488947,
            18014398509488977,
            18014398509488993,
            18014398509489017,
            18014398509489037,
            18014398509489047,
            18014398509489073,
            18014398509489101,
            18014398509489119,
            18014398509489149,
            18014398509489157,
            18014398509489167,
            18014398509489199,
            18014398509489329,
            18014398509489353,
            18014398509489367,
            18014398509489407,
            18014398509489409,
            18014398509489419,
            18014398509489449,
            18014398509489467,
            18014398509489619,
            18014398509489653,
            18014398509489691,
            18014398509489709,
            18014398509489727,
            18014398509489731,
            18014398509489787,
            18014398509489817,
            18014398509489869,
            18014398509489911,
            18014398509489923,
            18014398509490003,
            18014398509490007,
            18014398509490081,
            18014398509490129,
            18014398509490139,
            18014398509490151,
            18014398509490219,
            18014398509490237,
            18014398509490333,
            18014398509490363,
            18014398509490391,
            18014398509490393,
            18014398509490441,
            18014398509490463,
            18014398509490469,
            18014398509490489,
            18014398509490577,
            18014398509490583,
            18014398509490613,
            18014398509490639,
            18014398509490667,
            18014398509490699,
            18014398509490729,
            18014398509490759,
            18014398509490783,
            18014398509490843,
            18014398509490853,
            18014398509490891,
            18014398509490921,
            18014398509490949,
            18014398509490967,
            18014398509490997,
            18014398509491029,
            18014398509491063,
            18014398509491077,
            18014398509491123,
            18014398509491129,
            18014398509491203,
            18014398509491221,
            18014398509491281,
            18014398509491291,
            18014398509491303,
            18014398509491399,
            18014398509491441,
            18014398509491453,
            18014398509491533,
            18014398509491539,
            18014398509491569,
            18014398509491603,
            18014398509491621,
            18014398509491633,
            18014398509491653,
            18014398509491959,
        ];

        assert!(primes.into_iter().all(is_prime));
    }

    #[test]
    fn test_primes()
    {
        let primes = Primes::new(5000);

        let expected = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
            89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
            181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,
            277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
            383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,
            487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
            601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
            709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
            827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
            947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049,
            1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
            1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249,
            1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361,
            1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459,
            1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559,
            1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657,
            1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759,
            1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877,
            1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997,
            1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089,
            2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213,
            2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311,
            2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411,
            2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543,
            2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663,
            2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
            2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851,
            2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969,
            2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089,
            3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221,
            3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331,
            3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461,
            3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557,
            3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671,
            3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779,
            3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907,
            3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013,
            4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129,
            4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243,
            4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363,
            4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493,
            4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,
            4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729,
            4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871,
            4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973,
            4987, 4993, 4999,
        ];

        assert_eq!(primes.into_iter().collect::<Vec<_>>(), expected);
    }

    #[test]
    fn test_nth()
    {
        let primes = Primes::new(1000);

        let expected = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
            89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
            181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,
            277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
            383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,
            487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
            601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
            709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
            827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
            947, 953, 967, 971, 977, 983, 991, 997,
        ];

        for (i, &prime) in expected.iter().enumerate()
        {
            assert_eq!(primes.nth(i), Some(prime));
        }
    }
}
